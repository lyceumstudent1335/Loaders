from telebot.async_telebot import AsyncTeleBot, types
import asyncio
from dotenv import load_dotenv, set_key
import os
from json import loads, dumps
import aiosqlite

load_dotenv()

API_TOKEN = os.environ.get("API_TOKEN")
GENERAL_ADMIN = int(os.environ.get("GENERAL_ADMIN"))
bot = AsyncTeleBot(API_TOKEN)
admins = loads(os.environ.get("admins"))


async def msg_args(message: types.Message):
    msg_args_list = message.text.split()
    if len(msg_args_list) > 1:
        return msg_args_list


@bot.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.from_user.id not in admins:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await bot.send_message(message.from_user.id, "–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö.")


@bot.message_handler(commands=['add_admin'])
async def add_admin(message: types.Message):
    if message.from_user.id != GENERAL_ADMIN:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–µ–ª–µ–≥–∏–π.")
    else:
        args = await msg_args(message)
        if args is not None:
            admin_id = int(args[1])
            if admin_id not in admins:
                admins.append(admin_id)
                set_key('.env', 'admins', dumps(admins))
                await bot.send_message(message.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚ûï")
            else:
                await bot.send_message(message.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.")
        else:
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ User ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ @getmyid_bot).")


@bot.message_handler(commands=['del_admin'])
async def del_admin(message: types.Message):
    if message.from_user.id != GENERAL_ADMIN:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–µ–ª–µ–≥–∏–π.")
    else:
        args = await msg_args(message)
        if args is not None:
            admin_id = int(args[1])
            if admin_id in admins:
                if admin_id != GENERAL_ADMIN:
                    admins.remove(admin_id)
                    set_key('.env', 'admins', dumps(admins))
                    await bot.send_message(message.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω üóë")
                else:
                    await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ùå")
            else:
                await bot.send_message(message.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ User ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ @getmyid_bot).")            


@bot.message_handler(commands=['close_order'])
async def close_order(message: types.Message):
    if message.from_user.id not in admins:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        args = await msg_args(message)
        if args is not None:
            async with aiosqlite.connect("./instance/orders.db") as conn:
                await conn.execute("update orders set processing=0 where order_id=?", (args[1],))
                await conn.commit()
            await bot.send_message(message.from_user.id, f"–ó–∞–∫–∞–∑ #{args[1]} –∑–∞–∫—Ä—ã—Ç‚úÖ")
        else:
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")


@bot.message_handler(commands=['help'])
async def help(message: types.Message):
    if message.from_user.id not in admins:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await bot.send_message(message.from_user.id, """/strat - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/close_order <–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞> - –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑
/help - —Å–ø—Ä–∞–≤–∫–∞
                               
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
/add_admin <user_id> - –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞
/del_admin <user_id> - —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞
/admins - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
""")


@bot.message_handler(commands=['admins'])
async def admins_list(message: types.Message):
    if message.from_user.id != GENERAL_ADMIN:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–µ–ª–µ–≥–∏–π.")
    else:
        await bot.send_message(message.from_user.id, '\n'.join([f"[adm{user_id}](tg://user?id={user_id})" for user_id in admins]), parse_mode='MarkdownV2')


asyncio.run(bot.polling())
